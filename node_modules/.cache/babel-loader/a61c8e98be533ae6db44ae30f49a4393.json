{"ast":null,"code":"var _jsxFileName = \"/home/luana/trybeTunes/sd-014-b-project-trybetunes/src/component/musicCard.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport Loading from './Loading';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nclass MusicCard extends React.Component {\n  constructor() {\n    super();\n\n    this.handleChange = music => {\n      const {\n        checked\n      } = this.state;\n\n      if (checked === false) {\n        // se não tiver check, add a música\n        this.setState({\n          loading: true\n        });\n        addSong(music).then(() => this.setState({\n          loading: false,\n          checked: true\n        }));\n      } else if (checked === true) {\n        // se tiver check, remove a música\n        this.setState({\n          loading: true\n        });\n        removeSong(music).then(() => this.setState({\n          loading: false,\n          checked: false\n        }));\n      }\n    };\n\n    this.state = {\n      loading: false,\n      checked: false\n    };\n  } // Função feita com ajuda do Wellington Fonseca\n\n\n  render() {\n    const {\n      musics: {\n        trackName,\n        previewUrl,\n        trackId\n      }\n    } = this.props;\n    const {\n      loading,\n      checked\n    } = this.state;\n\n    const loadingElement = /*#__PURE__*/_jsxDEV(Loading, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 28\n    }, this);\n\n    const musics = /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n        children: trackName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n        \"data-testid\": \"audio-component\",\n        src: previewUrl,\n        controls: true,\n        children: [/*#__PURE__*/_jsxDEV(\"track\", {\n          kind: \"captions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), \"O seu navegador n\\xE3o suporta o elemento\", /*#__PURE__*/_jsxDEV(\"code\", {\n          children: \"audio\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"id\",\n        children: /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"checkbox\",\n          id: \"id\",\n          \"data-testid\": `checkbox-music-${trackId}`,\n          checked: checked,\n          onChange: () => this.handleChange(this.props) // ao marcar, chama a função handlechange, passando o objeto recebido pela api desconstruida como paramêtro\n\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: !loading ? musics : loadingElement\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nMusicCard.propTypes = {\n  musics: PropTypes.shape({\n    trackName: PropTypes.string,\n    previewUrl: PropTypes.string,\n    trackId: PropTypes.number\n  }).isRequired\n};\nexport default MusicCard;","map":{"version":3,"sources":["/home/luana/trybeTunes/sd-014-b-project-trybetunes/src/component/musicCard.js"],"names":["React","PropTypes","addSong","removeSong","Loading","MusicCard","Component","constructor","handleChange","music","checked","state","setState","loading","then","render","musics","trackName","previewUrl","trackId","props","loadingElement","propTypes","shape","string","number","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { addSong, removeSong } from '../services/favoriteSongsAPI';\nimport Loading from './Loading';\n\nclass MusicCard extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      loading: false,\n      checked: false,\n    };\n  }\n\n  // Função feita com ajuda do Wellington Fonseca\n  handleChange = (music) => {\n    const { checked } = this.state;\n    if (checked === false) { // se não tiver check, add a música\n      this.setState({\n        loading: true,\n      });\n      addSong(music)\n        .then(() => this.setState({\n          loading: false,\n          checked: true,\n        }));\n    } else if (checked === true) { // se tiver check, remove a música\n      this.setState({\n        loading: true,\n      });\n      removeSong(music)\n        .then(() => this.setState({\n          loading: false,\n          checked: false,\n        }));\n    }\n  }\n\n  render() {\n    const { musics: { trackName, previewUrl, trackId } } = this.props;\n    const { loading, checked } = this.state;\n    const loadingElement = <Loading />;\n    const musics = (\n      <>\n        <h5>{trackName}</h5>\n        <audio data-testid=\"audio-component\" src={ previewUrl } controls>\n          <track kind=\"captions\" />\n          O seu navegador não suporta o elemento\n          <code>audio</code>\n        </audio>\n        <label htmlFor=\"id\">\n          <input\n            type=\"checkbox\"\n            id=\"id\"\n            data-testid={ `checkbox-music-${trackId}` }\n            checked={ checked }\n            onChange={ () => this.handleChange(this.props) } // ao marcar, chama a função handlechange, passando o objeto recebido pela api desconstruida como paramêtro\n          />\n        </label>\n      </>\n    );\n    return (\n      <div>\n        {!loading ? musics : loadingElement}\n      </div>\n    );\n  }\n}\n\nMusicCard.propTypes = {\n  musics: PropTypes.shape({\n    trackName: PropTypes.string,\n    previewUrl: PropTypes.string,\n    trackId: PropTypes.number,\n  }).isRequired,\n};\n\nexport default MusicCard;\n"]},"metadata":{},"sourceType":"module"}